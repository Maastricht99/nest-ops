name: Deployment Pipeline
on:
    push:
        branches: 
            - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
  AWS_ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
  AWS_ECS_CONTAINER: ${{ secrets.AWS_ECS_CONTAINER }}
  AWS_ECS_CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
  AWS_ECS_SERVICE: ${{ secrets.AWS_ECS_SERVICE }}

jobs:
    deploy:
        name: Deploy App
        runs-on: ubuntu-latest
        environment: prod

        steps:
            - name: Checkout Branch
              uses: actions/checkout@v3

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
                aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
                aws-region: ${{ env.AWS_REGION }}

            - name: Log Docker Into ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
    
            - name: Build, Tag And Push Docker Image
              id: build-image
              env: 
                IMAGE_TAG: ${{ github.sha }}
              run: |
                docker build --target production -t $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG .
                docker push $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:$IMAGE_TAG
                echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

            - name: Define New ECS Task Revision
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                task-definition: task-definition.json
                container-name: ${{ env.AWS_ECS_CONTAINER }}
                image: ${{ steps.build-image.outputs.image }}

            - name: Deploy To ECS
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                task-definition: ${{ steps.task-def.outputs.task-definition }}
                service: ${{ env.AWS_ECS_SERVICE }}
                cluster: ${{ env.AWS_ECS_CLUSTER }}
                wait-for-service-stability: true



